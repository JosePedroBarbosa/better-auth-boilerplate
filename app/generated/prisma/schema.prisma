generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  BUY
  SELL
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  onboardedAt   DateTime?
  sessions      Session[]
  accounts      Account[]

  firstName String?
  lastName  String?
  country   String?

  stripeCustomerId String?

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  portfolioId String?    @unique
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id])

  role Role @default(USER)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Subscription {
  id                   String    @id
  plan                 String
  referenceId          String
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String?
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?

  @@map("subscription")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Portfolio {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?

  positions    Position[]
  transactions Transaction[]
  favorites    Favorite[]

  @@map("portfolio")
}

model Position {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  symbol String

  totalQuantity Float @default(0) // Quantidade total acumulada
  totalInvested Float @default(0) // Total investido (soma de todos os aportes)
  avgPrice      Float @default(0) // Preço médio ponderado

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([portfolioId, symbol])
  @@map("position")
}

model Transaction {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  symbol   String // Símbolo da criptomoeda (ex: BTC, ETH)
  type     TransactionType // BUY ou SELL
  quantity Float // Quantidade transacionada
  price    Float // Preço unitário da transação
  amount   Float // Valor total da transação (quantity * price)
  fee      Float           @default(0) // Taxa da transação

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}

model Favorite {
  id          String    @id @default(cuid())
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  symbol String // Símbolo da criptomoeda favorita (ex: BTC, ETH)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([portfolioId, symbol])
  @@map("favorite")
}
